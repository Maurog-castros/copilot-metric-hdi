# Script para subir archivos est√°ticos de Copilot Metrics Viewer al servidor HDI
# Uso: .\upload-static-files.ps1

param(
    [string]$Server = "192.168.1.24",
    [string]$User = "mcastro",
    [string]$Password = "HDI.2025"
)

Write-Host "üöÄ Subiendo archivos est√°ticos de Copilot Metrics Viewer..." -ForegroundColor Green
Write-Host "üì° Servidor: $Server" -ForegroundColor Cyan
Write-Host "üë§ Usuario: $User" -ForegroundColor Cyan

# Verificar que existe la build
if (-not (Test-Path ".output\public")) {
    Write-Host "‚ùå Error: No se encontr√≥ la build en .output/public" -ForegroundColor Red
    Write-Host "üí° Ejecuta primero: npm run build" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Build encontrada en .output/public" -ForegroundColor Green

# Crear archivo temporal con los archivos
$tempZip = "copilot-build-temp.zip"
Write-Host "üì¶ Creando archivo comprimido..." -ForegroundColor Yellow

try {
    # Limpiar archivo anterior si existe
    if (Test-Path $tempZip) {
        Remove-Item $tempZip -Force
    }
    
    # Crear archivo comprimido
    Compress-Archive -Path ".output\public\*" -DestinationPath $tempZip -Force
    Write-Host "‚úÖ Archivo comprimido creado: $tempZip" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Error creando archivo comprimido: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Funci√≥n para ejecutar comandos SSH
function Invoke-SSHCommand {
    param([string]$Command)
    
    $sshCommand = "ssh -o StrictHostKeyChecking=no $User@$Server `"$Command`""
    Write-Host "üîß Ejecutando: $Command" -ForegroundColor Gray
    
    try {
        $result = Invoke-Expression $sshCommand
        return $result
    }
    catch {
        Write-Host "‚ùå Error ejecutando comando SSH: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Funci√≥n para subir archivo con SCP
function Copy-FileToServer {
    param([string]$LocalPath, [string]$RemotePath)
    
    $scpCommand = "scp -o StrictHostKeyChecking=no `"$LocalPath`" $User@$Server`:$RemotePath"
    Write-Host "üì§ Subiendo archivo..." -ForegroundColor Yellow
    
    try {
        Invoke-Expression $scpCommand
        Write-Host "‚úÖ Archivo subido exitosamente" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Error subiendo archivo: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

Write-Host "üì§ Subiendo archivo al servidor..." -ForegroundColor Yellow

# Subir archivo comprimido
if (-not (Copy-FileToServer $tempZip "/tmp/copilot-build.zip")) {
    Write-Host "‚ùå Error subiendo archivo. Verifica la conexi√≥n SSH." -ForegroundColor Red
    exit 1
}

Write-Host "üîß Extrayendo archivos en el servidor..." -ForegroundColor Yellow

# Comandos para ejecutar en el servidor
$serverCommands = @(
    "cd /home/Apps/statics/copilot-metrics/public",
    "sudo rm -rf *",
    "cd /tmp",
    "sudo unzip -o copilot-build.zip -d /home/Apps/statics/copilot-metrics/public/",
    "sudo chown -R mcastro:mcastro /home/Apps/statics/copilot-metrics/",
    "sudo chmod -R 755 /home/Apps/statics/copilot-metrics/",
    "rm copilot-build.zip"
)

foreach ($cmd in $serverCommands) {
    $result = Invoke-SSHCommand $cmd
    if ($result -eq $null) {
        Write-Host "‚ùå Error ejecutando comando en servidor: $cmd" -ForegroundColor Red
        exit 1
    }
}

Write-Host "üöÄ Levantando nginx reverse proxy..." -ForegroundColor Yellow

# Levantar nginx reverse proxy
$nginxCommands = @(
    "cd /home/Apps/nginxReverseProxy",
    "docker-compose down",
    "docker-compose up -d"
)

foreach ($cmd in $nginxCommands) {
    $result = Invoke-SSHCommand $cmd
    if ($result -eq $null) {
        Write-Host "‚ùå Error ejecutando comando nginx: $cmd" -ForegroundColor Red
        exit 1
    }
}

Write-Host "üîç Verificando estado del servicio..." -ForegroundColor Yellow

# Verificar estado
$statusCommands = @(
    "docker ps | grep nginx",
    "ls -la /home/Apps/statics/copilot-metrics/public/ | head -10"
)

foreach ($cmd in $statusCommands) {
    Write-Host "üìä Ejecutando: $cmd" -ForegroundColor Gray
    $result = Invoke-SSHCommand $cmd
    if ($result) {
        Write-Host $result -ForegroundColor White
    }
}

# Limpiar archivo temporal local
if (Test-Path $tempZip) {
    Remove-Item $tempZip -Force
    Write-Host "üßπ Archivo temporal limpiado" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üéâ ¬°Despliegue completado!" -ForegroundColor Green
Write-Host "üåê La aplicaci√≥n est√° disponible en: http://$Server" -ForegroundColor Cyan
Write-Host "üîç Health check: http://$Server/health" -ForegroundColor Cyan
Write-Host ""
Write-Host "üí° Para actualizar la aplicaci√≥n, simplemente ejecuta este script nuevamente despu√©s de hacer 'npm run build'" -ForegroundColor Yellow

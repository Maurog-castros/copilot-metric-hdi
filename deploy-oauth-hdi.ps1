# Script de despliegue para Copilot Metrics Viewer con OAuth en HDI
# Este script configura nginx correctamente para manejar las rutas OAuth

param(
    [switch]$SkipDocker,
    [switch]$SkipNginx,
    [switch]$Force
)

# Variables
$NGINX_CONFIG_FILE = "nginx-oauth-hdi.conf"
$DOCKER_COMPOSE_FILE = "docker-compose.hdi.yml"

Write-Host "üöÄ Iniciando despliegue de Copilot Metrics Viewer con OAuth..." -ForegroundColor Green

# Verificar que estamos en el directorio correcto
if (-not (Test-Path $DOCKER_COMPOSE_FILE)) {
    Write-Host "‚ùå Error: No se encontr√≥ $DOCKER_COMPOSE_FILE" -ForegroundColor Red
    Write-Host "   Aseg√∫rate de ejecutar este script desde el directorio del proyecto" -ForegroundColor Yellow
    exit 1
}

if (-not (Test-Path $NGINX_CONFIG_FILE)) {
    Write-Host "‚ùå Error: No se encontr√≥ $NGINX_CONFIG_FILE" -ForegroundColor Red
    Write-Host "   Aseg√∫rate de que el archivo de configuraci√≥n nginx existe" -ForegroundColor Yellow
    exit 1
}

# Verificar que Docker est√° instalado
if (-not $SkipDocker) {
    if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå Error: Docker no est√° instalado" -ForegroundColor Red
        Write-Host "   Instala Docker Desktop: https://www.docker.com/products/docker-desktop" -ForegroundColor Yellow
        exit 1
    }

    # Verificar que Docker Compose est√° instalado
    if (-not (Get-Command docker-compose -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå Error: Docker Compose no est√° instalado" -ForegroundColor Red
        Write-Host "   Instala Docker Compose: https://docs.docker.com/compose/install/" -ForegroundColor Yellow
        exit 1
    }

    Write-Host "‚úÖ Verificaciones de dependencias completadas" -ForegroundColor Green

    # Detener servicios existentes
    Write-Host "üõë Deteniendo servicios existentes..." -ForegroundColor Yellow
    try {
        docker-compose -f $DOCKER_COMPOSE_FILE down
    } catch {
        Write-Host "‚ö†Ô∏è  No se pudieron detener servicios existentes (esto es normal si no estaban ejecut√°ndose)" -ForegroundColor Yellow
    }

    # Construir y levantar la aplicaci√≥n
    Write-Host "üî® Construyendo y levantando la aplicaci√≥n..." -ForegroundColor Yellow
    docker-compose -f $DOCKER_COMPOSE_FILE build --no-cache
    docker-compose -f $DOCKER_COMPOSE_FILE up -d

    # Esperar a que la aplicaci√≥n est√© lista
    Write-Host "‚è≥ Esperando a que la aplicaci√≥n est√© lista..." -ForegroundColor Yellow
    Start-Sleep -Seconds 30

    # Verificar que la aplicaci√≥n est√° funcionando
    Write-Host "üîç Verificando que la aplicaci√≥n est√© funcionando..." -ForegroundColor Yellow
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3000/health" -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Aplicaci√≥n funcionando correctamente" -ForegroundColor Green
        } else {
            throw "Status code: $($response.StatusCode)"
        }
    } catch {
        Write-Host "‚ùå Error: La aplicaci√≥n no est√° respondiendo en el puerto 3000" -ForegroundColor Red
        Write-Host "   Revisa los logs: docker-compose -f $DOCKER_COMPOSE_FILE logs" -ForegroundColor Yellow
        exit 1
    }
}

# Configurar nginx (solo en Linux)
if (-not $SkipNginx) {
    Write-Host "üîß Configurando nginx..." -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è  Nota: Este script est√° dise√±ado para Linux. En Windows, usa Docker Desktop con nginx." -ForegroundColor Yellow
    Write-Host "   Para Windows, considera usar Docker Desktop con un contenedor nginx." -ForegroundColor Yellow
}

# Verificar que las rutas OAuth funcionan
Write-Host "üîç Verificando rutas OAuth..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/auth/github" -TimeoutSec 10
    Write-Host "‚úÖ Ruta OAuth funcionando correctamente" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Advertencia: Ruta OAuth no responde (esto es normal si no hay HTTPS)" -ForegroundColor Yellow
    Write-Host "   En producci√≥n, aseg√∫rate de configurar HTTPS" -ForegroundColor Yellow
}

# Verificar que la aplicaci√≥n principal funciona
Write-Host "üîç Verificando aplicaci√≥n principal..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/" -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Aplicaci√≥n principal funcionando correctamente" -ForegroundColor Green
    } else {
        throw "Status code: $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Error: Aplicaci√≥n principal no responde" -ForegroundColor Red
    Write-Host "   Revisa los logs: docker-compose -f $DOCKER_COMPOSE_FILE logs" -ForegroundColor Yellow
    exit 1
}

Write-Host ""
Write-Host "üéâ ¬°Despliegue completado exitosamente!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Resumen del despliegue:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Aplicaci√≥n: http://localhost:3000/" -ForegroundColor White
Write-Host "   ‚Ä¢ Health check: http://localhost:3000/health" -ForegroundColor White
Write-Host "   ‚Ä¢ Ruta OAuth: http://localhost:3000/auth/github" -ForegroundColor White
Write-Host "   ‚Ä¢ Configuraci√≥n nginx: $NGINX_CONFIG_FILE" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Ver logs de la aplicaci√≥n: docker-compose -f $DOCKER_COMPOSE_FILE logs -f" -ForegroundColor White
Write-Host "   ‚Ä¢ Reiniciar aplicaci√≥n: docker-compose -f $DOCKER_COMPOSE_FILE restart" -ForegroundColor White
Write-Host "   ‚Ä¢ Detener aplicaci√≥n: docker-compose -f $DOCKER_COMPOSE_FILE down" -ForegroundColor White
Write-Host ""
Write-Host "‚ö†Ô∏è  Nota: Para producci√≥n en servidor Linux, usa:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Script bash: ./deploy-oauth-hdi.sh" -ForegroundColor White
Write-Host "   ‚Ä¢ Configurar nginx con la configuraci√≥n nginx-oauth-hdi.conf" -ForegroundColor White
Write-Host "   ‚Ä¢ Configurar HTTPS con certificados SSL" -ForegroundColor White
Write-Host "   ‚Ä¢ Verificar que las URLs de callback OAuth coincidan" -ForegroundColor White
